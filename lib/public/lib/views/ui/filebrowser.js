// Generated by CoffeeScript 1.3.1
(function() {

  define(function(require, exports, module) {
    var FileBrowser, FileView, ITEM_HEIGHT, addKeyboardListener, node;
    require('vendor/link!css/filebrowser.css');
    node = require('lib/utils').node;
    addKeyboardListener = require('lib/keyboard').addKeyboardListener;
    ITEM_HEIGHT = 70;
    FileView = Backbone.View.extend({
      template: require('lib/templates/file_item'),
      className: 'file-item',
      events: {
        'dblclick': 'openFile',
        'click .name': 'openFile',
        'click': 'onClick'
      },
      initialize: function() {
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
        return app.console.on('change:client', this.render, this);
      },
      openFile: function() {
        return app.console.openFile(this.model.get('url'));
      },
      onClick: function() {
        return this.select();
      },
      destroy: function() {
        this.model.off('destroy', this.remove, this);
        this.model.off('change', this.render, this);
        return app.console.off('change:client', this.render, this);
      },
      select: function(bool) {
        if (bool == null) {
          bool = true;
        }
        this.$el.toggleClass('is-selected', bool);
        if (bool) {
          this.trigger('select', this.model);
        }
        return this.selected = bool;
      },
      render: function() {
        var clientId, json, parsedName, _ref, _ref1;
        json = this.model.toJSON();
        clientId = (_ref = app.console) != null ? (_ref1 = _ref.client) != null ? _ref1.id : void 0 : void 0;
        parsedName = json.name.match(/^(.+)(\.[^\.]+)$/);
        _.extend(json, {
          isActive: clientId && (json.clients.indexOf(clientId)) !== -1,
          isOpen: !!json.edit,
          name: parsedName[1],
          extension: parsedName[2],
          isHelper: 0 === json.url.indexOf('#local')
        });
        this.$el.html(this.template(json));
        return this;
      }
    });
    FileBrowser = Backbone.View.extend({
      MIN_WIDTH: 150,
      initialize: function() {
        var _this = this;
        _.bindAll(this, 'onResize', 'onSelect', 'onKeyDown');
        this.subviews = [];
        this.collection.on('add', this.onAddFile, this);
        this.collection.on('reset', this.onAddAllFiles, this);
        $(window).on('resize', this.onResize);
        addKeyboardListener('filebrowser', this.el);
        this.el.listenKey('file-prev', {
          mac: 'right',
          exec: function() {
            return _this.moveSelection(1);
          }
        });
        this.el.listenKey('file-next', {
          mac: 'left',
          exec: function() {
            return _this.moveSelection(-1);
          }
        });
        this.el.listenKey('file-prev-row', {
          mac: 'up',
          exec: function() {
            return _this.moveSelection(-_this.cols);
          }
        });
        this.el.listenKey('file-next-row', {
          mac: 'down',
          exec: function() {
            return _this.moveSelection(_this.cols);
          }
        });
        this.el.listenKey('file-first', {
          mac: 'home',
          exec: function() {
            return _this.collection.first().view.select();
          }
        });
        this.el.listenKey('file-last', {
          mac: 'end',
          exec: function() {
            return _this.collection.last().view.select();
          }
        });
        this.el.listenKey('select-file', {
          mac: 'return',
          exec: function() {
            var _ref, _ref1;
            return (_ref = _this.selectedFile()) != null ? (_ref1 = _ref.view) != null ? _ref1.openFile() : void 0 : void 0;
          }
        });
        this.$el.on('keydown', this.onKeyDown);
        return this.search = '';
      },
      destroy: function() {
        this.collection.each(function(file) {
          return file.view.destroy();
        });
        this.collection.off('add', this.addOne, this);
        this.collection.off('reset', this.addAll, this);
        return $(window).off('resize', this.onResize);
      },
      onKeyDown: function(e) {
        var char, curTime, file, search, _ref;
        char = String.fromCharCode(e.keyCode);
        if (!char.length) {
          return this.search = '';
        }
        curTime = new Date();
        if (curTime - this.lastCharTime > 700) {
          this.search = '';
        }
        this.search += char.toLowerCase();
        this.lastCharTime = curTime;
        search = this.search;
        file = this.collection.find(function(file) {
          return -1 !== file.get('name').toLowerCase().indexOf(search);
        });
        return file != null ? (_ref = file.view) != null ? _ref.select() : void 0 : void 0;
      },
      moveSelection: function(delta) {
        var index, selectedFile;
        selectedFile = this.selectedFile();
        index = this.collection.indexOf(selectedFile);
        index += delta;
        if (index < 0) {
          index = 0;
        }
        if (index >= this.collection.size()) {
          index = this.collection.size() - 1;
        }
        this.collection.at(index).view.select();
        return event.preventDefault();
      },
      onResize: function() {
        var width;
        width = this.el.offsetWidth;
        this.cols = ~~(width / this.MIN_WIDTH);
        return this.$('.file-item').css({
          width: "" + ((100 / this.cols).toFixed(3)) + "%"
        });
      },
      onAddFile: function(file) {
        var view;
        view = new FileView({
          model: file
        });
        view.on('select', this.onSelect);
        file.view = view;
        if (this.colWidth) {
          $(view.render().el).css({
            width: this.colWidth
          });
        }
        return this.$el.append(view.render().el);
      },
      onAddAllFiles: function() {
        this.collection.each(this.onAddFile, this);
        return this.onResize();
      },
      selectedFile: function() {
        return this.collection.find(function(file) {
          return file.view.selected;
        });
      },
      onSelect: function(file) {
        var offset, scroll, selectedFile;
        selectedFile = this.selectedFile();
        if (!selectedFile || selectedFile === file) {
          return;
        }
        selectedFile.view.select(false);
        offset = file.view.el.offsetTop - 5;
        scroll = this.el.scrollTop;
        if (offset < scroll) {
          this.el.scrollTop = offset;
        }
        if (offset - this.el.offsetHeight + ITEM_HEIGHT > this.el.scrollTop) {
          return this.el.scrollTop = offset - this.el.offsetHeight + ITEM_HEIGHT;
        }
      }
    });
    return module.exports = FileBrowser;
  });

}).call(this);
