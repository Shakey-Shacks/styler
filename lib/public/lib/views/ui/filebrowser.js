// Generated by CoffeeScript 1.3.1
(function() {

  define(function(require, exports, module) {
    var FileBrowser, FileItem, FileItemList, FileItemView, ITEM_HEIGHT, addKeyboardListener, node;
    require('vendor/link!css/filebrowser.css');
    node = require('lib/utils').node;
    addKeyboardListener = require('lib/keyboard').addKeyboardListener;
    ITEM_HEIGHT = 70;
    FileItem = Backbone.Model.extend({
      defaults: function() {
        return {
          type: 'file',
          file: null,
          items: null
        };
      }
    });
    FileItemList = Backbone.Collection.extend({
      model: FileItem,
      comparator: function(p) {
        return p.get('type');
      }
    });
    FileItemView = Backbone.View.extend({
      className: 'file-item',
      events: {
        'dblclick': 'openFile',
        'click .name': 'openFile',
        'click': 'onClick'
      },
      initialize: function() {
        var items;
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
        if (this.model.get('type') === 'file') {
          this.$el.addClass('is-file');
          this.$el.append([
            node('div', {
              "class": 'name'
            }, this.model.get('file').get('url'))
          ]);
        } else {
          this.$el.addClass('is-dir');
          this.$el.append([
            node('div', {
              "class": 'name'
            }, this.model.get('path')), this.itemsEl = node('div')
          ]);
          items = this.model.get('items');
          items.on('add', this.onItemAdd, this);
          items.on('reset', this.onItemAddAll, this);
        }
        return app.console.on('change:client', this.render, this);
      },
      onItemAdd: function(item) {
        var index, previous, previousView, view;
        view = (new FileItemView({
          model: item
        })).render();
        index = this.model.get('items').indexOf(view.model);
        previous = this.model.get('items').at(index - 1);
        previousView = previous && previous.view;
        if (index === 0 || !previous || !previousView) {
          return $(this.itemsEl).prepend(view.el);
        } else {
          return $(previousView.el).after(view.el);
        }
      },
      onItemAddAll: function(items) {
        $(this.itemsEl).empty();
        return this.model.get('items').each(this.onItemAdd, this);
      },
      openFile: function() {
        return app.console.openFile(this.model.get('url'));
      },
      onClick: function() {
        return this.select();
      },
      destroy: function() {
        this.model.off('destroy', this.remove, this);
        this.model.off('change', this.render, this);
        return app.console.off('change:client', this.render, this);
      },
      select: function(bool) {
        if (bool == null) {
          bool = true;
        }
        this.$el.toggleClass('is-selected', bool);
        if (bool) {
          this.trigger('select', this.model);
        }
        return this.selected = bool;
      },
      render: function() {
        /*
              json = @model.toJSON()
              clientId = app.console?.client?.id
              parsedName = json.name.match /^(.+)(\.[^\.]+)$/
              _.extend json,
                isActive: clientId && (json.clients.indexOf clientId) != -1
                isOpen: !!json.edit
                name: parsedName[1]
                extension: parsedName[2]
                isHelper: 0 == json.url.indexOf '#local'
              @$el.html @template json
        */
        return this;
      }
    });
    FileBrowser = Backbone.View.extend({
      MIN_WIDTH: 150,
      initialize: function() {
        var rootView,
          _this = this;
        _.bindAll(this, 'onResize', 'onSelect', 'onKeyDown');
        this.subviews = [];
        this.collection.on('add', this.onAddFile, this);
        this.collection.on('reset', this.onAddAllFiles, this);
        $(window).on('resize', this.onResize);
        addKeyboardListener('filebrowser', this.el);
        this.el.listenKey('file-prev', {
          mac: 'right',
          exec: function() {
            return _this.moveSelection(1);
          }
        });
        this.el.listenKey('file-next', {
          mac: 'left',
          exec: function() {
            return _this.moveSelection(-1);
          }
        });
        this.el.listenKey('file-prev-row', {
          mac: 'up',
          exec: function() {
            return _this.moveSelection(-_this.cols);
          }
        });
        this.el.listenKey('file-next-row', {
          mac: 'down',
          exec: function() {
            return _this.moveSelection(_this.cols);
          }
        });
        this.el.listenKey('file-first', {
          mac: 'home',
          exec: function() {
            return _this.collection.first().view.select();
          }
        });
        this.el.listenKey('file-last', {
          mac: 'end',
          exec: function() {
            return _this.collection.last().view.select();
          }
        });
        this.el.listenKey('select-file', {
          mac: 'return',
          exec: function() {
            var _ref, _ref1;
            return (_ref = _this.selectedFile()) != null ? (_ref1 = _ref.view) != null ? _ref1.openFile() : void 0 : void 0;
          }
        });
        this.root = new FileItem({
          type: 'dir',
          path: '',
          items: new FileItemList
        });
        rootView = new FileItemView({
          model: this.root
        });
        this.$el.append(rootView.render().el);
        this.$el.on('keydown', this.onKeyDown);
        return this.search = '';
      },
      destroy: function() {
        this.collection.each(function(file) {
          return file.view.destroy();
        });
        this.collection.off('add', this.addOne, this);
        this.collection.off('reset', this.addAll, this);
        return $(window).off('resize', this.onResize);
      },
      onKeyDown: function(e) {
        var char, curTime, file, search, _ref;
        char = String.fromCharCode(e.keyCode);
        if (!char.length) {
          return this.search = '';
        }
        curTime = new Date();
        if (curTime - this.lastCharTime > 700) {
          this.search = '';
        }
        this.search += char.toLowerCase();
        this.lastCharTime = curTime;
        search = this.search;
        file = this.collection.find(function(file) {
          return -1 !== file.get('name').toLowerCase().indexOf(search);
        });
        return file != null ? (_ref = file.view) != null ? _ref.select() : void 0 : void 0;
      },
      moveSelection: function(delta) {
        var index, selectedFile;
        selectedFile = this.selectedFile();
        index = this.collection.indexOf(selectedFile);
        index += delta;
        if (index < 0) {
          index = 0;
        }
        if (index >= this.collection.size()) {
          index = this.collection.size() - 1;
        }
        this.collection.at(index).view.select();
        return event.preventDefault();
      },
      onResize: function() {},
      getParent: function(item, path) {
        var found, items, newitem,
          _this = this;
        if (!path.length || path.length === 1 && path[0] === item.get('path')) {
          return item;
        }
        items = item.get('items');
        found = false;
        items.each(function(subitem) {
          console.log('compare', subitem.get('type'), subitem.get('path'), path[0]);
          if (subitem.get('type') === 'dir' && subitem.get('path') === path[0]) {
            return found = _this.getParent(subitem, path.slice(1));
          }
        });
        if (found) {
          return found;
        }
        newitem = new FileItem({
          path: path[0],
          type: 'dir',
          items: new FileItemList
        });
        items.add(newitem);
        return this.getParent(newitem, path.slice(1));
      },
      onAddFile: function(file) {
        var fileitem, parent, path;
        path = file.get('url').replace(/[^\/]*$/, '');
        parent = this.getParent(this.root, path.split('/'));
        fileitem = new FileItem({
          type: 'file',
          file: file
        });
        parent.get('items').add(fileitem);
        return tm('addfile');
        /*
              view = new FileView model: file
              view.on 'select', @onSelect
              file.view = view
              $(view.render().el).css width: @colWidth if @colWidth
              @$el.append view.render().el
        */

      },
      onAddAllFiles: function() {
        this.collection.each(this.onAddFile, this);
        return this.onResize();
      },
      selectedFile: function() {
        return this.collection.find(function(file) {
          return file.view.selected;
        });
      },
      onSelect: function(file) {
        var offset, scroll, selectedFile;
        selectedFile = this.selectedFile();
        if (!selectedFile || selectedFile === file) {
          return;
        }
        selectedFile.view.select(false);
        offset = file.view.el.offsetTop - 5;
        scroll = this.el.scrollTop;
        if (offset < scroll) {
          this.el.scrollTop = offset;
        }
        if (offset - this.el.offsetHeight + ITEM_HEIGHT > this.el.scrollTop) {
          return this.el.scrollTop = offset - this.el.offsetHeight + ITEM_HEIGHT;
        }
      }
    });
    return module.exports = FileBrowser;
  });

}).call(this);
