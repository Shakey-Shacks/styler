define(function(require, exports, module){
  require("vendor/jade"); 
  module.exports = function anonymous(locals, attrs, escape, rethrow) {
var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;
var buf = [];
with (locals || {}) {
var interp;
buf.push('<div');
buf.push(attrs({ "class": ('settings') }));
buf.push('><div');
buf.push(attrs({ "class": ('forms') }));
buf.push('><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('editor') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Editor</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Theme</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><select');
buf.push(attrs({ "class": ("theme") }));
buf.push('><option');
buf.push(attrs({ 'value':("clouds") }));
buf.push('>Clouds</option><option');
buf.push(attrs({ 'value':("clouds_midnight") }));
buf.push('>Clouds Midnight</option><option');
buf.push(attrs({ 'value':("cobalt") }));
buf.push('>Cobalt</option><option');
buf.push(attrs({ 'value':("crimson_editor") }));
buf.push('>Crimson</option><option');
buf.push(attrs({ 'value':("dawn") }));
buf.push('>Dawn</option><option');
buf.push(attrs({ 'value':("eclipse") }));
buf.push('>Eclipse</option><option');
buf.push(attrs({ 'value':("idle_fingers") }));
buf.push('>Idle Fingers</option><option');
buf.push(attrs({ 'value':("kr_theme") }));
buf.push('>KR Theme</option><option');
buf.push(attrs({ 'value':("merbivore") }));
buf.push('>Merbivore</option><option');
buf.push(attrs({ 'value':("merbivore_soft") }));
buf.push('>Merbivore Soft</option><option');
buf.push(attrs({ 'value':("mono_industrial") }));
buf.push('>Mono Industrial</option><option');
buf.push(attrs({ 'value':("monokai") }));
buf.push('>Monokai</option><option');
buf.push(attrs({ 'value':("pastel_on_dark") }));
buf.push('>Pastel on Dark</option><option');
buf.push(attrs({ 'value':("solarized_dark") }));
buf.push('>Solarized Dark</option><option');
buf.push(attrs({ 'value':("solarized_light") }));
buf.push('>Solarized Light</option><option');
buf.push(attrs({ 'value':("textmate") }));
buf.push('>Textmate</option><option');
buf.push(attrs({ 'value':("tomorrow") }));
buf.push('>Tomorrow</option><option');
buf.push(attrs({ 'value':("twilight") }));
buf.push('>Twilight</option><option');
buf.push(attrs({ 'value':("vibrant_ink") }));
buf.push('>Vibrant Ink</option></select></div></div><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("save_icon"), "class": ("cbxcontrol") }));
buf.push('/>Save icon\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("line_numbers"), "class": ("cbxcontrol") }));
buf.push('/>Line numbers\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("invisibles"), "class": ("cbxcontrol") }));
buf.push('/>Show invisibles\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("statusbar"), "class": ("cbxcontrol") }));
buf.push('/>Show statusbar\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("confirm_keyboard_close"), "class": ("cbxcontrol") }));
buf.push('/>Confirm accidental window close\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("confirm_unsaved_close"), "class": ("cbxcontrol") }));
buf.push('/>Confirm closing unsaved files\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("autocomplete"), "class": ("cbxcontrol") }));
buf.push('/>Automatically show completions\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("sidebar_right"), "class": ("cbxcontrol") }));
buf.push('/>Sidebar on right\n<br');
buf.push(attrs({  }));
buf.push('/></div></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('csslint') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>CSSLint</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('items') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('footer') }));
buf.push('><a');
buf.push(attrs({ 'href':("https://github.com/stubbornella/csslint/wiki/Rules"), 'target':("_blank") }));
buf.push('>More info about the rules</a></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('keyboard') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Keyboard Shortcuts</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('items') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('footer') }));
buf.push('><a');
buf.push(attrs({ 'href':("javascript:not_implemented()") }));
buf.push('>Print cheat sheet</a></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('development') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Developement</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Development Mode</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("devmode"), "class": ("cbxcontrol") }));
buf.push('/></div></div><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Show FPS stats</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("fpsstats"), "class": ("cbxcontrol") }));
buf.push('/></div></div></div></div></div><div');
buf.push(attrs({ "class": ('buttons') }));
buf.push('><div');
buf.push(attrs({ "class": ('button') + ' ' + ('close') }));
buf.push('>Close</div></div></div>');
}
return buf.join("");
};
});