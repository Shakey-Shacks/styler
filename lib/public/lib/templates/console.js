define(function(require, exports, module){
  require("vendor/jade"); 
  module.exports = function anonymous(locals, attrs, escape, rethrow) {
var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;
var buf = [];
with (locals || {}) {
var interp;
buf.push('<div');
buf.push(attrs({ "class": ('main-toolbar') }));
buf.push('><div');
buf.push(attrs({ "class": ('tools-group') }));
buf.push('><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-back') }));
buf.push('><label>Back to project list</label></div></div><div');
buf.push(attrs({ "class": ('client-select') + ' ' + ('client-select-toolbar') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('tools-group') }));
buf.push('><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-inspect') }));
buf.push('><label>Inspect on page</label></div><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-refresh') }));
buf.push('><label>Reload elements</label></div><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-identify') }));
buf.push('><label>Identify client</label></div><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-embed') }));
buf.push('><label>Single window mode</label></div><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-sidebyside') }));
buf.push('><label>Side by side single window</label></div></div><div');
buf.push(attrs({ "class": ('tools-group') }));
buf.push('><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-edit') }));
buf.push('><label>Edit project</label></div><div');
buf.push(attrs({ "class": ('tool') + ' ' + ('tool-settings') }));
buf.push('><label>Settings</label></div></div><div');
buf.push(attrs({ "class": ('sidebar-toggle') }));
buf.push('></div></div><div');
buf.push(attrs({ "class": ('main-container') }));
buf.push('><div');
buf.push(attrs({ "class": ('main') }));
buf.push('><div');
buf.push(attrs({ "class": ('sidebar') }));
buf.push('><div');
buf.push(attrs({ "class": ('client-select') + ' ' + ('client-select-sidebar') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('block-heading') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('infobar') + ' ' + ('infobar-outline') + ' ' + ('overflow-row') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('styleinfo') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('resizer') + ' ' + ('resizer-vertical') }));
buf.push('><div');
buf.push(attrs({ "class": ('inner') }));
buf.push('><div');
buf.push(attrs({ "class": ('thumb') }));
buf.push('></div></div></div><div');
buf.push(attrs({ "class": ('elements-outline') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('no-clients-fallback') }));
buf.push('><div');
buf.push(attrs({ "class": ('connect-helper') }));
buf.push('>To see real time updates and live debugging data open another browser window at\n<span');
buf.push(attrs({ "class": ('url') }));
buf.push('></span>and connect it to Styler using either injected code, bookmarklet or an extension.\n</div><div');
buf.push(attrs({ "class": ('hide-hint') }));
buf.push('>If you don\'t need the client area you can click the collapse icon to hide it.\n</div></div></div><div');
buf.push(attrs({ "class": ('resizer') + ' ' + ('resizer-horizontal') }));
buf.push('><div');
buf.push(attrs({ "class": ('inner') }));
buf.push('><div');
buf.push(attrs({ "class": ('thumb') }));
buf.push('></div></div></div><div');
buf.push(attrs({ "class": ('main-content') }));
buf.push('><div');
buf.push(attrs({ "class": ('editor-container') }));
buf.push('></div></div></div><div');
buf.push(attrs({ "class": ('cli-container') }));
buf.push('></div></div>');
}
return buf.join("");
};
});