// Generated by CoffeeScript 1.3.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('lib/views/settings', ['require', 'exports', 'module' , 'ace/lib/useragent', 'ace/lib/keys', 'lib/utils', 'lib/keyboard', 'empty', 'lib/templates/settings'], function(require, exports, module) {
    var Settings, addKeyboardListener, formatKeyCommand, keys, node, ua, _ref;
    ua = require('ace/lib/useragent');
    keys = require('ace/lib/keys');
    node = require('lib/utils').node;
    _ref = require('lib/keyboard'), addKeyboardListener = _ref.addKeyboardListener, formatKeyCommand = _ref.formatKeyCommand;
    require('empty');
    Settings = Backbone.View.extend({
      className: 'overlay',
      template: require('lib/templates/settings'),
      events: {
        'click': 'dismissOnOverlay',
        'click .button.close': 'dismiss',
        'click .sheet .title': 'onSheetSelect',
        'click .item .keycommand': 'onKeyCommandChangeRequest',
        'change .theme': 'onThemeChange',
        'change .cbxcontrol': 'onCheckboxChange',
        'change .lintrule': 'onLintRuleChange'
      },
      csslint: {
        'Errors': [
          {
            id: 'box-model',
            txt: 'Beware of broken box sizing'
          }, {
            id: 'display-property-grouping',
            txt: 'Require properties appropriate for display'
          }, {
            id: 'duplicate-properties',
            txt: 'Disallow duplicate properties'
          }, {
            id: 'empty-rules',
            txt: 'Disallow empty rules'
          }, {
            id: 'known-properties',
            txt: 'Require use of known properties'
          }
        ],
        'Compatibility': [
          {
            id: 'adjoining-classes',
            txt: 'Disallow adjoining classes'
          }, {
            id: 'box-sizing',
            txt: 'Disallow box-sizing'
          }, {
            id: 'compatible-vendor-prefixes',
            txt: 'Require compatible vendor prefixes'
          }, {
            id: 'gradients',
            txt: 'Require all gradient definitions'
          }, {
            id: 'text-indent',
            txt: 'Disallow negative text-indent'
          }, {
            id: 'vendor-prefix',
            txt: 'Require standard property with vendor prefix'
          }
        ],
        'Performance': [
          {
            id: 'font-faces',
            txt: 'Don\'t use too many web fonts'
          }, {
            id: 'import',
            txt: 'Disallow @import'
          }, {
            id: 'regex-selectors',
            txt: 'Disallow selectors that look like regexs'
          }, {
            id: 'universal-selector',
            txt: 'Disallow universal selector'
          }, {
            id: 'zero-units',
            txt: 'Disallow units for 0 values'
          }, {
            id: 'overqualified-elements',
            txt: 'Disallow overqualified elements'
          }, {
            id: 'shorthand',
            txt: 'Require shorthand properties'
          }
        ],
        'Maintainability & Duplication': [
          {
            id: 'floats',
            txt: 'Disallow too many floats'
          }, {
            id: 'font-sizes',
            txt: 'Don\'t use too many font sizes'
          }, {
            id: 'ids',
            txt: 'Disallow IDs in selectors'
          }, {
            id: 'important',
            txt: 'Disallow !important'
          }
        ],
        'Accessibility': [
          {
            id: 'outline-none',
            txt: 'Disallow outline:none'
          }
        ],
        'OOCSS': [
          {
            id: 'qualified-headings',
            txt: 'Disallow qualified headings'
          }, {
            id: 'unique-headings',
            txt: 'Heading should only be defined once'
          }
        ]
      },
      keyboard: {
        'Navigation': [
          {
            id: 'focus-styleinfo',
            txt: 'Focus Style Info'
          }, {
            id: 'focus-tree',
            txt: 'Focus Elements Outline'
          }, {
            id: 'focus-clientswitch',
            txt: 'Focus Clients Switch'
          }, {
            id: 'focus-editor',
            txt: 'Focus Editor area'
          }, {
            id: 'toggle-infobar',
            txt: 'Toggle Info bar'
          }, {
            id: 'toggle-left-pane',
            txt: 'Toggle Left Pane'
          }, {
            id: 'toggle-window-mode',
            txt: 'Toggle application mode'
          }, {
            id: 'start-inspector-mode',
            txt: 'Start inspector mode'
          }, {
            id: 'toggle-iframe-container',
            txt: 'Toggle Iframe mode'
          }, {
            id: 'toggle-cli',
            txt: 'Toggle command line'
          }, {
            id: 'settings',
            txt: 'Settings'
          }, {
            id: 'back-to-project-list',
            txt: 'Back to project list'
          }
        ],
        'Elements Outline': [
          {
            id: 'select-next-element',
            txt: 'Select next element'
          }, {
            id: 'select-previous-element',
            txt: 'Select previous element'
          }, {
            id: 'select-down-many',
            txt: 'Fast move down'
          }, {
            id: 'select-up-many',
            txt: 'Fast move up'
          }, {
            id: 'fold-element',
            txt: 'Fold selection'
          }, {
            id: 'unfold-element',
            txt: 'Unfold selection'
          }, {
            id: 'select-outline-subtree',
            txt: 'Select Subtree'
          }, {
            id: 'hide-outline-subtree',
            txt: 'Hide Subtree'
          }, {
            id: 'focus-element-styleinfo',
            txt: 'Focus selected element\'s style'
          }, {
            id: 'scroll-to-view',
            txt: 'Scroll selected element into view'
          }
        ],
        'Style info': [
          {
            id: 'style-item-down',
            txt: 'Highlight next item'
          }, {
            id: 'style-item-up',
            txt: 'Highlight previous item'
          }, {
            id: 'style-selector-down',
            txt: 'Highlight next rule'
          }, {
            id: 'style-selector-up',
            txt: 'Highlight previous rule'
          }, {
            id: 'style-item-expand',
            txt: 'Expand shorthand item'
          }, {
            id: 'style-item-collapse',
            txt: 'Collapse shorthand item'
          }, {
            id: 'style-item-open',
            txt: 'Open highlighted style in editor'
          }, {
            id: 'style-rule-open',
            txt: 'Open rule in editor',
            "static": 1,
            mac: '⌥⌘[1-9]',
            win: 'Ctrl-Shift-[1-9]'
          }, {
            id: 'switch-back-to-outline',
            txt: 'Switch back to outline'
          }
        ],
        'Editor': [
          {
            id: 'select-filebrowser',
            txt: 'Select file browser'
          }, {
            id: 'select-tab',
            txt: 'Select tab',
            "static": 1,
            mac: '⌘[1-9]',
            win: 'Ctrl-[1-9]'
          }, {
            id: 'save-tab',
            txt: 'Save tab'
          }, {
            id: 'save-all',
            txt: 'Save all tabs'
          }, {
            id: 'close-tab',
            txt: 'Close tab'
          }, {
            id: 'toggle-update-mode',
            txt: 'Switch update mode'
          }, {
            id: 'toggle-tab-mode',
            txt: 'Switch tab modes'
          }, {
            id: 'focus-selector-up',
            txt: 'Focus previous selector'
          }, {
            id: 'focus-selector-down',
            txt: 'Focus next selector'
          }, {
            id: 'search-in-file',
            txt: 'Search in file'
          }, {
            id: 'search-next-result',
            txt: 'Next search result'
          }, {
            id: 'search-previous-result',
            txt: 'Previous search result'
          }, {
            id: 'indent-selection',
            txt: 'Indent selection'
          }, {
            id: 'outdent-selection',
            txt: 'Outdent selection'
          }, {
            id: 'numeric-increment',
            txt: 'Increment numeric value'
          }, {
            id: 'numeric-decrement',
            txt: 'Decrement numeric value'
          }, {
            id: 'numeric-increment-many',
            txt: 'Multi Increment numeric value'
          }, {
            id: 'numeric-decrement-many',
            txt: 'Multi Decrement numeric value'
          }, {
            id: 'select-focused-selector',
            txt: 'Select (next) element for rule'
          }, {
            id: 'select-focused-selector-reverse',
            txt: 'Select previous element for rule'
          }, {
            id: 'edit-value',
            txt: 'Edit property value'
          }, {
            id: 'new-property',
            txt: 'Add new property'
          }, {
            id: 'show-completions',
            txt: 'Show completions'
          }
        ]
      },
      initialize: function() {
        var _this = this;
        _.bindAll(this, 'onKeyDown');
        addKeyboardListener('settings', this.el);
        document.addEventListener('keydown', this.onKeyDown, true);
        $(document.body).append(this.render().el);
        return _.delay(function() {
          return _this.$el.addClass('is-loaded');
        }, 30);
      },
      onSheetSelect: function(e) {
        return this.selectSheet($(e.currentTarget).parent());
      },
      selectSheet: function(el) {
        this.$('.sheet').removeClass('is-selected');
        return $(el).addClass('is-selected');
      },
      dismissOnOverlay: function(e) {
        if (this._keyChangeElement) {
          return this.cancelKeyCommand();
        }
        if (e.target === this.el) {
          return this.dismiss();
        }
      },
      dismiss: function() {
        var _this = this;
        document.removeEventListener('keydown', this.onKeyDown, true);
        this.$el.removeClass('is-loaded');
        return _.delay(function() {
          return _this.$el.remove();
        }, 500);
      },
      onKeyDown: function(e) {
        var el, key, tab;
        if (this._keyChangeElement) {
          if (!keys.MODIFIER_KEYS[e.keyCode]) {
            key = keys[e.keyCode];
            if (key) {
              key = [key];
              if (e.metaKey) {
                key.unshift('command');
              }
              if (e.altKey) {
                key.unshift('alt');
              }
              if (e.shiftKey) {
                key.unshift('shift');
              }
              if (e.ctrlKey) {
                key.unshift('ctrl');
              }
              this.saveKeyCommand(e, key.join('-'));
            }
          }
        } else {
          if (keys.MODIFIER_KEYS[e.keyCode] === 'Esc') {
            this.dismiss();
          } else if ((String.fromCharCode(e.keyCode).match(/[0-9]/)) && (e.metaKey || e.ctrlKey)) {
            tab = parseInt(String.fromCharCode(e.keyCode));
            el = this.$('.sheet').get(tab - 1);
            if (el) {
              this.selectSheet(el);
            }
          }
        }
        e.stopPropagation();
        return e.preventDefault();
      },
      onCheckboxChange: function(e) {
        var ob;
        if (e.target.id) {
          ob = {};
          ob[e.target.id] = !!e.target.checked;
          return app.Settings.save(ob);
        }
      },
      onThemeChange: function(e) {
        return app.Settings.save({
          theme: e.target.value
        });
      },
      onLintRuleChange: function(e) {
        var current, i, newrules, ruleid, v;
        ruleid = e.target.getAttribute('data-ruleid');
        current = app.Settings.get('csslint');
        newrules = {};
        for (i in current) {
          v = current[i];
          newrules[i] = v;
        }
        newrules[ruleid] = e.target.checked ? 1 : 0;
        return app.Settings.save({
          csslint: newrules
        });
      },
      onKeyCommandChangeRequest: function(e) {
        var el, hintEl, hintKeys, msg;
        el = e.currentTarget;
        this._keyChangeElement = el;
        $(el).addClass('edit').html('[press new key]');
        this.$el.append(hintEl = node('div', {
          "class": 'keyenterhint'
        }, 'Press new key combination on your keyboard to change the shortcut. To cancel click anywhere on the screen.'));
        if (ua.isChrome) {
          if (ua.isMac) {
            hintKeys = '⌘W, ⌘Q, ⌘N and ⌘T';
          } else {
            hintKeys = 'Ctrl-N, Ctrl-T, Alt-F4 and Alt-Tab';
          }
          msg = "Please note that Google Chrome does not support overwriting some system shortcuts(like " + hintKeys + "). Please try not to use these shortcuts as they may provide unexpected results.";
        }
        if (msg) {
          return hintEl.appendChild(node('div', {
            "class": 'warningnote'
          }, msg));
        }
      },
      saveKeyCommand: function(e, keyCode) {
        var cmd, commandId, el, exp, newvalue, shortcuts;
        shortcuts = this.model.get('keyboard_shortcuts');
        el = this._keyChangeElement;
        commandId = el.getAttribute('data-cmd-id');
        newvalue = _.clone(shortcuts);
        newvalue[cmd_id] = _.clone(newvalue[commandId]);
        cmd = newvalue[commandId];
        if (ua.isMac) {
          cmd.mac = keyCode;
        } else {
          cmd.win = keyCode;
        }
        if (cmd["export"]) {
          exp = _.extend((ua.isMac ? cmd["export"].mac : cmd["export"].win), {
            code: e.keyCode,
            meta: e.metaKey,
            ctrl: e.ctrlKey,
            shift: e.shiftKey,
            alt: e.altKey,
            txt: formatKeyCommand(keyCode)
          });
        }
        app.Settings.save({
          keyboard_shortcuts: newvalue
        });
        this.cancelKeyCommand();
        return this.highlightDuplicateKeys();
      },
      cancelKeyCommand: function(e) {
        var commandId, el, keyCode, shortcut;
        el = this._keyChangeElement;
        commandId = el.getAttribute('data-cmd-id');
        shortcut = this.model.get('keyboard_shortcuts')[commandId];
        keyCode = shortcut.mac;
        if (!ua.isMac && shortcut.win) {
          keyCode = shortcut.win;
        }
        $(el).removeClass('edit').html(formatKeyCommand(keyCode));
        this.$('.keyenterhint').remove();
        return this._keyChangeElement = null;
      },
      highlightDuplicateKeys: function(e) {
        var codes, duplicates, names, shortcuts;
        shortcuts = this.model.get('keyboard_shortcuts');
        duplicates = {};
        codes = _.map(shortcuts, function(cmd) {
          return (cmd.scope ? cmd.scope : '') + (ua.isMac ? cmd.mac : cmd.win || cmd.mac).toLowerCase();
        });
        names = _.keys(shortcuts);
        _.each(names, function(name, i) {
          if (__indexOf.call(duplicates, name) >= 0) {
            return;
          }
          return _.each(names, function(compare, j) {
            if (i === j) {
              return;
            }
            if (codes[i] === codes[j]) {
              return duplicates[name] = duplicates[compare] = 1;
            }
          });
        });
        this.$('.warning').removeClass('warning');
        return this.$('.keycommand').each(function(i, el) {
          if (duplicates[el.getAttribute('data-cmd-id')]) {
            return $(el.parentNode).addClass('warning');
          }
        });
      },
      render: function() {
        var cbox, dcmd, dgroup, ditem, dvalue, fragment, groupname, keyCode, lintrules, name, opt, options, shortcuts, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
        this.$el.html(this.template(this.model.toJSON()));
        this.$('.theme').val(this.model.get('theme'));
        _ref1 = 'save_icon|line_numbers|invisibles|confirm_keyboard_close|confirm_unsaved_close|autocomplete|statusbar|fpsstats|sidebar_right|devmode'.split('|');
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          name = _ref1[_i];
          this.$('#' + name)[0].checked = !!this.model.get(name);
        }
        this.$('.sheet.editor').addClass('is-selected');
        lintrules = this.model.get('csslint');
        fragment = document.createDocumentFragment();
        _ref2 = this.csslint;
        for (groupname in _ref2) {
          options = _ref2[groupname];
          fragment.appendChild(ditem = node('div', {
            "class": 'item'
          }, node('div', {
            "class": 'lbl'
          }, groupname), dvalue = node('div', {
            "class": 'value'
          })));
          for (_j = 0, _len1 = options.length; _j < _len1; _j++) {
            opt = options[_j];
            cbox = node('input', {
              type: 'checkbox',
              value: 1,
              "class": 'lintrule',
              'data-ruleid': opt.id
            });
            if (!!lintrules[opt.id]) {
              cbox.checked = true;
            }
            dvalue.appendChild(cbox);
            dvalue.appendChild(document.createTextNode(opt.txt));
            dvalue.appendChild(node('br'));
          }
        }
        this.$('.sheet.csslint .contents .items').append(fragment);
        shortcuts = this.model.get('keyboard_shortcuts');
        fragment = document.createDocumentFragment();
        _ref3 = this.keyboard;
        for (groupname in _ref3) {
          options = _ref3[groupname];
          fragment.appendChild(dgroup = node('div', {
            "class": 'group'
          }, node('div', {
            "class": 'group-name'
          }, groupname)));
          for (_k = 0, _len2 = options.length; _k < _len2; _k++) {
            opt = options[_k];
            keyCode = (_ref4 = shortcuts[opt.id]) != null ? _ref4.mac : void 0;
            if (!ua.isMac && ((_ref5 = shortcuts[opt.id]) != null ? _ref5.win : void 0)) {
              keyCode = (_ref6 = shortcuts[opt.id]) != null ? _ref6.win : void 0;
            }
            dgroup.appendChild(ditem = node('div', {
              "class": 'item'
            }, node('div', {
              "class": 'lbl'
            }, opt.txt), opt["static"] ? node('div', {
              "class": 'statickey'
            }, (ua.isMac ? opt.mac : opt.win)) : dcmd = node('div', {
              "class": 'keycommand',
              'data-cmd-id': opt.id
            }, formatKeyCommand(keyCode))));
          }
        }
        this.$('.sheet.keyboard .contents .items').append(fragment);
        this.highlightDuplicateKeys();
        return this;
      }
    });
    return module.exports = Settings;
  });

}).call(this);
define('lib/templates/settings', ['require', 'exports', 'module' , 'vendor/jade'], function(require, exports, module) {
  require("vendor/jade"); 
  module.exports = function anonymous(locals, attrs, escape, rethrow) {
var attrs = jade.attrs, escape = jade.escape, rethrow = jade.rethrow;
var buf = [];
with (locals || {}) {
var interp;
buf.push('<div');
buf.push(attrs({ "class": ('settings') }));
buf.push('><div');
buf.push(attrs({ "class": ('forms') }));
buf.push('><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('editor') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Editor</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Theme</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><select');
buf.push(attrs({ "class": ("theme") }));
buf.push('><option');
buf.push(attrs({ 'value':("clouds") }));
buf.push('>Clouds</option><option');
buf.push(attrs({ 'value':("clouds_midnight") }));
buf.push('>Clouds Midnight</option><option');
buf.push(attrs({ 'value':("cobalt") }));
buf.push('>Cobalt</option><option');
buf.push(attrs({ 'value':("crimson_editor") }));
buf.push('>Crimson</option><option');
buf.push(attrs({ 'value':("dawn") }));
buf.push('>Dawn</option><option');
buf.push(attrs({ 'value':("eclipse") }));
buf.push('>Eclipse</option><option');
buf.push(attrs({ 'value':("idle_fingers") }));
buf.push('>Idle Fingers</option><option');
buf.push(attrs({ 'value':("kr_theme") }));
buf.push('>KR Theme</option><option');
buf.push(attrs({ 'value':("merbivore") }));
buf.push('>Merbivore</option><option');
buf.push(attrs({ 'value':("merbivore_soft") }));
buf.push('>Merbivore Soft</option><option');
buf.push(attrs({ 'value':("mono_industrial") }));
buf.push('>Mono Industrial</option><option');
buf.push(attrs({ 'value':("monokai") }));
buf.push('>Monokai</option><option');
buf.push(attrs({ 'value':("pastel_on_dark") }));
buf.push('>Pastel on Dark</option><option');
buf.push(attrs({ 'value':("solarized_dark") }));
buf.push('>Solarized Dark</option><option');
buf.push(attrs({ 'value':("solarized_light") }));
buf.push('>Solarized Light</option><option');
buf.push(attrs({ 'value':("textmate") }));
buf.push('>Textmate</option><option');
buf.push(attrs({ 'value':("tomorrow") }));
buf.push('>Tomorrow</option><option');
buf.push(attrs({ 'value':("twilight") }));
buf.push('>Twilight</option><option');
buf.push(attrs({ 'value':("vibrant_ink") }));
buf.push('>Vibrant Ink</option></select></div></div><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("save_icon"), "class": ("cbxcontrol") }));
buf.push('/>Save icon\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("line_numbers"), "class": ("cbxcontrol") }));
buf.push('/>Line numbers\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("invisibles"), "class": ("cbxcontrol") }));
buf.push('/>Show invisibles\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("statusbar"), "class": ("cbxcontrol") }));
buf.push('/>Show statusbar\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("confirm_keyboard_close"), "class": ("cbxcontrol") }));
buf.push('/>Confirm accidental window close\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("confirm_unsaved_close"), "class": ("cbxcontrol") }));
buf.push('/>Confirm closing unsaved files\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("autocomplete"), "class": ("cbxcontrol") }));
buf.push('/>Automatically show completions\n<br');
buf.push(attrs({  }));
buf.push('/><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("sidebar_right"), "class": ("cbxcontrol") }));
buf.push('/>Sidebar on right\n<br');
buf.push(attrs({  }));
buf.push('/></div></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('csslint') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>CSSLint</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('items') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('footer') }));
buf.push('><a');
buf.push(attrs({ 'href':("https://github.com/stubbornella/csslint/wiki/Rules"), 'target':("_blank") }));
buf.push('>More info about the rules</a></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('keyboard') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Keyboard Shortcuts</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('items') }));
buf.push('></div><div');
buf.push(attrs({ "class": ('footer') }));
buf.push('><a');
buf.push(attrs({ 'href':("javascript:not_implemented()") }));
buf.push('>Print cheat sheet</a></div></div></div><div');
buf.push(attrs({ "class": ('sheet') + ' ' + ('development') }));
buf.push('><div');
buf.push(attrs({ "class": ('title') }));
buf.push('>Developement</div><div');
buf.push(attrs({ "class": ('contents') }));
buf.push('><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Development Mode</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("devmode"), "class": ("cbxcontrol") }));
buf.push('/></div></div><div');
buf.push(attrs({ "class": ('item') }));
buf.push('><div');
buf.push(attrs({ "class": ('lbl') }));
buf.push('>Show FPS stats</div><div');
buf.push(attrs({ "class": ('value') }));
buf.push('><input');
buf.push(attrs({ 'type':("checkbox"), 'id':("fpsstats"), "class": ("cbxcontrol") }));
buf.push('/></div></div></div></div></div><div');
buf.push(attrs({ "class": ('buttons') }));
buf.push('><div');
buf.push(attrs({ "class": ('button') + ' ' + ('close') }));
buf.push('>Close</div></div></div>');
}
return buf.join("");
};
});